# 并查集
class UnionFind:
    def __init__(self):
        self.father = dict()

    def find(self, x):
        root = x
        # 查询根节点
        while self.father[root] != None:
            root = self.father[root]

        # 打平节点
        while x != root:
            origin_father = self.father[x]
            self.father[x] = root
            x = origin_father
        return root

    # 合并连通域的时候把一个节点挂靠在另一个节点上
    def merge(self, x, y,):
        root_x, root_y = self.find(x), self.find(y)
        if root_x != root_y:
            self.father[root_x] = root_y

    # 查询节点是否连通
    def is_connected(self, x, y):
        return x in self.father and y in self.father and self.find(x) == self.find(y)

    def add(self, x):
        if x not in self.father:
            self.father[x] = None

if __name__ == '__main__':
    uf = UnionFind()
    uf.add(3)
    uf.add(2)
    uf.add(1)
    uf.merge(1, 3)
    uf.merge(1, 2)

    uf.add(4)
    uf.add(5)
    uf.merge(4, 5)

    print(uf.is_connected(2, 3))
    print(uf.is_connected(4, 5))
    print(uf.is_connected(2, 4))
